"use strict";(self.webpackChunkcodespaces_web_client=self.webpackChunkcodespaces_web_client||[]).push([[4],{91714:(s,t,h)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SshSessionConfiguration=t.SshProtocolExtensionNames=void 0;const e=h(83730),i=h(36186),o=h(948),n=h(52826),r=h(40770),a=h(4432);var c;!function(s){s.serverSignatureAlgorithms="server-sig-algs",s.openChannelRequest="open-channel-request@microsoft.com",s.sessionReconnect="session-reconnect@microsoft.com",s.sessionLatency="session-latency@microsoft.com"}(c=t.SshProtocolExtensionNames||(t.SshProtocolExtensionNames={}));t.SshSessionConfiguration=class{constructor(s=!0){this.protocolExtensions=[],this.services=new Map,this.authenticationMethods=[],this.messages=new Map,this.contextualMessages=new Map,this.keyExchangeAlgorithms=[],this.publicKeyAlgorithms=[],this.encryptionAlgorithms=[],this.hmacAlgorithms=[],this.compressionAlgorithms=[],this.traceChannelDataValue=!1,this.configurationChangedEmitter=new e.Emitter,this.onConfigurationChanged=this.configurationChangedEmitter.event,this.maxClientAuthenticationAttempts=5,this.enableKeyExchangeGuess=!1,this.keyRotationThreshold=536870912,this.protocolExtensions.push(c.serverSignatureAlgorithms),this.protocolExtensions.push(c.openChannelRequest),this.services.set(o.KeyExchangeService,null),this.services.set(n.ConnectionService,null),this.services.set(r.AuthenticationService,null),this.authenticationMethods.push("none","password","publickey","keyboard-interactive");for(const[s,t]of a.SshMessage.index)if("number"==typeof s)this.messages.set(s,t);else{const[h,e]=s;let i=this.contextualMessages.get(e);i||(i=new Map,this.contextualMessages.set(e,i)),i.set(h,t)}s?(this.keyExchangeAlgorithms.push(i.SshAlgorithms.keyExchange.ecdhNistp384Sha384),this.keyExchangeAlgorithms.push(i.SshAlgorithms.keyExchange.ecdhNistp256Sha256),this.keyExchangeAlgorithms.push(i.SshAlgorithms.keyExchange.dhGroup16Sha512),this.keyExchangeAlgorithms.push(i.SshAlgorithms.keyExchange.dhGroup14Sha256),this.publicKeyAlgorithms.push(i.SshAlgorithms.publicKey.rsaWithSha512),this.publicKeyAlgorithms.push(i.SshAlgorithms.publicKey.rsaWithSha256),this.publicKeyAlgorithms.push(i.SshAlgorithms.publicKey.ecdsaSha2Nistp384),this.publicKeyAlgorithms.push(i.SshAlgorithms.publicKey.ecdsaSha2Nistp256),this.encryptionAlgorithms.push(i.SshAlgorithms.encryption.aes256Gcm),this.encryptionAlgorithms.push(i.SshAlgorithms.encryption.aes256Ctr),this.hmacAlgorithms.push(i.SshAlgorithms.hmac.hmacSha512Etm),this.hmacAlgorithms.push(i.SshAlgorithms.hmac.hmacSha256Etm),this.hmacAlgorithms.push(i.SshAlgorithms.hmac.hmacSha512),this.hmacAlgorithms.push(i.SshAlgorithms.hmac.hmacSha256)):(this.keyExchangeAlgorithms.push(i.SshAlgorithms.keyExchange.none),this.publicKeyAlgorithms.push(i.SshAlgorithms.publicKey.none),this.encryptionAlgorithms.push(i.SshAlgorithms.encryption.none),this.hmacAlgorithms.push(i.SshAlgorithms.hmac.none)),this.compressionAlgorithms.push(i.SshAlgorithms.compression.none)}addService(s,t){if(this.services.has(s))throw new Error("Duplicate service entry.");this.services.set(s,t)}getKeyExchangeAlgorithm(s){return this.getAlgorithm(s,this.keyExchangeAlgorithms)}getPublicKeyAlgorithm(s){return this.getAlgorithm(s,this.publicKeyAlgorithms)}getEncryptionAlgorithm(s){return this.getAlgorithm(s,this.encryptionAlgorithms)}getHmacAlgorithm(s){return this.getAlgorithm(s,this.hmacAlgorithms)}getCompressionAlgorithm(s){return this.getAlgorithm(s,this.compressionAlgorithms)}getAlgorithm(s,t){const h=t.find((t=>!!t&&t.name===s));if(!h){if("none"===s)return null;throw new Error("Algorithm not found: "+s)}return h}get traceChannelData(){return this.traceChannelDataValue}set traceChannelData(s){s!==this.traceChannelDataValue&&(this.traceChannelDataValue=s,this.configurationChangedEmitter.fire())}}},97183:(s,t,h)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SshSessionConfiguration=t.SshProtocolExtensionNames=void 0;const e=h(83730),i=h(91605),o=h(43210),n=h(47165),r=h(76502),a=h(285);var c;!function(s){s.serverSignatureAlgorithms="server-sig-algs",s.openChannelRequest="open-channel-request@microsoft.com",s.sessionReconnect="session-reconnect@microsoft.com",s.sessionLatency="session-latency@microsoft.com"}(c=t.SshProtocolExtensionNames||(t.SshProtocolExtensionNames={}));t.SshSessionConfiguration=class{constructor(s=!0){this.protocolExtensions=[],this.services=new Map,this.messages=new Map,this.keyExchangeAlgorithms=[],this.publicKeyAlgorithms=[],this.encryptionAlgorithms=[],this.hmacAlgorithms=[],this.compressionAlgorithms=[],this.traceChannelDataValue=!1,this.configurationChangedEmitter=new e.Emitter,this.onConfigurationChanged=this.configurationChangedEmitter.event,this.maxClientAuthenticationAttempts=5,this.enableKeyExchangeGuess=!1,this.keyRotationThreshold=536870912,this.protocolExtensions.push(c.serverSignatureAlgorithms),this.protocolExtensions.push(c.openChannelRequest),this.services.set(o.KeyExchangeService,null),this.services.set(n.ConnectionService,null),this.services.set(r.AuthenticationService,null);for(let[s,t]of a.SshMessage.index)this.messages.set(s,t);s?(this.keyExchangeAlgorithms.push(i.SshAlgorithms.keyExchange.ecdhNistp384Sha384),this.keyExchangeAlgorithms.push(i.SshAlgorithms.keyExchange.ecdhNistp256Sha256),this.keyExchangeAlgorithms.push(i.SshAlgorithms.keyExchange.dhGroup16Sha512),this.keyExchangeAlgorithms.push(i.SshAlgorithms.keyExchange.dhGroup14Sha256),this.publicKeyAlgorithms.push(i.SshAlgorithms.publicKey.rsaWithSha512),this.publicKeyAlgorithms.push(i.SshAlgorithms.publicKey.rsaWithSha256),this.publicKeyAlgorithms.push(i.SshAlgorithms.publicKey.ecdsaSha2Nistp384),this.publicKeyAlgorithms.push(i.SshAlgorithms.publicKey.ecdsaSha2Nistp256),this.encryptionAlgorithms.push(i.SshAlgorithms.encryption.aes256Gcm),this.encryptionAlgorithms.push(i.SshAlgorithms.encryption.aes256Ctr),this.hmacAlgorithms.push(i.SshAlgorithms.hmac.hmacSha512Etm),this.hmacAlgorithms.push(i.SshAlgorithms.hmac.hmacSha256Etm),this.hmacAlgorithms.push(i.SshAlgorithms.hmac.hmacSha512),this.hmacAlgorithms.push(i.SshAlgorithms.hmac.hmacSha256)):(this.keyExchangeAlgorithms.push(i.SshAlgorithms.keyExchange.none),this.publicKeyAlgorithms.push(i.SshAlgorithms.publicKey.none),this.encryptionAlgorithms.push(i.SshAlgorithms.encryption.none),this.hmacAlgorithms.push(i.SshAlgorithms.hmac.none)),this.compressionAlgorithms.push(i.SshAlgorithms.compression.none)}addService(s,t){if(this.services.has(s))throw new Error("Duplicate service entry.");this.services.set(s,t)}getKeyExchangeAlgorithm(s){return this.getAlgorithm(s,this.keyExchangeAlgorithms)}getPublicKeyAlgorithm(s){return this.getAlgorithm(s,this.publicKeyAlgorithms)}getEncryptionAlgorithm(s){return this.getAlgorithm(s,this.encryptionAlgorithms)}getHmacAlgorithm(s){return this.getAlgorithm(s,this.hmacAlgorithms)}getCompressionAlgorithm(s){return this.getAlgorithm(s,this.compressionAlgorithms)}getAlgorithm(s,t){const h=t.find((t=>!!t&&t.name===s));if(!h){if("none"===s)return null;throw new Error("Algorithm not found: "+s)}return h}get traceChannelData(){return this.traceChannelDataValue}set traceChannelData(s){s!==this.traceChannelDataValue&&(this.traceChannelDataValue=s,this.configurationChangedEmitter.fire())}}}}]);